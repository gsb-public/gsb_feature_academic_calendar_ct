<?php
/**
 * @file
 * Code for the gsb_feature_academic_calendar_ct feature.
 */

include_once 'gsb_feature_academic_calendar_ct.features.inc';

/**
 * Implements hook_form_FORM_ID_alter() for academic_calendar_event_node_form().
 */
function gsb_feature_academic_calendar_ct_form_academic_calendar_event_node_form_alter(&$form, &$form_state, $form_id) {
  $term = taxonomy_get_term_by_name('Academic Calendar','event_category');
  $tid = array_keys($term)[0];
  if (isset($form['field_event_category'])) {
    $langcode = $form['field_event_category']['#language'];
    $form['field_event_category'][$langcode]['#value'] = $tid;
    $form['field_event_category'][$langcode]['#type'] = 'hidden';
  }
}

/**
 * Implements hook_date_popup_process_alter().
 */
function gsb_feature_academic_calendar_ct_date_popup_process_alter(&$element, &$form_state, $context) {
  if ($form_state['build_info']['form_id'] != 'academic_calendar_event_node_form') {
    return;
  }

  if (isset($element['#field']['field_name']) && $element['#field']['field_name'] == 'field_event_date') {
    $element['time']['#value'] = '00:00';
    $element['time']['#default_value'] = '00:00';
    $element['time']['#type'] = 'hidden';
  }
}

function gsb_feature_academic_calendar_ct_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'academic_calendar_event_node_form' && arg(1) == 'add') {
    //$form['field_academic_year']['und']['#default_value'] = variable_get('gsb_academic_year');
    $form['field_academic_year']['und']['#default_value'] = Date('Y');
    $checkbox_values = array_keys($form['field_academic_calendar_display']['und']['#options']);
    $form['field_academic_calendar_display']['und']['#default_value'] = $checkbox_values;
  }
}

/**
 * Gets the allowed academic years.
 *[field_academic_year-value]
 * @param string $year
 *   If no year is specified, the current year will be used.
 *
 * @return int[]
 *   An associative array of academic years with matching keys and values.
 */
function gsb_feature_academic_calendar_ct_get_allowed_values($year = '') {
    // Either ensure the year is an integer, or load the current year.
    //$year = $year ? (int) $year : gsb_academic_year_get_value();
    $year = Date('Y');
    return drupal_map_assoc(range(2014, $year + 1));
}

/**
 * Gets the allowed academic year labels.
 *
 * @return string[]
 *   An associative array of academic years, containing the human-readable
 *   labels keyed by the year value.
 */
function gsb_feature_academic_calendar_ct_get_allowed_labels() {
    return array_map('_gsb_feature_academic_calendar_ct_to_label', gsb_feature_academic_calendar_ct_get_allowed_values());
}

/**
 * Returns the human-readable version of an academic year.
 *
 * @param int $year
 *   The academic year value.
 *
 * @return string
 *   The human-readable academic year.
 */
function _gsb_feature_academic_calendar_ct_to_label($year) {
    $year_past = $year - 1;
    //return 'AY ' . $year_past . '-' . substr($year, -2);;
    return  $year_past . '-' . substr($year, -2). ' Academic Year';
}

